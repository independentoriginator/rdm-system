<?xml version="1.1" encoding="UTF-8"?>
<databaseChangeLog 
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd 
        http://www.liquibase.org/xml/ns/dbchangelog 
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd">
        
	<changeSet id="meta_view" author="${default_author}">

		<!-- meta_view_group -->
		<createTable
			tableName="meta_view_group" 
			remarks="Meta view group">
			<column name="id" type="${type.id}" autoIncrement="true" remarks="Identifier">
				<constraints nullable="false" />
			</column>
			<column name="internal_name" type="${type.internal_name}" remarks="Internal name">
				<constraints nullable="false" />
			</column>
		</createTable>
		
		<addPrimaryKey 
			constraintName="pk_meta_view_group" 
			tableName="meta_view_group"
			columnNames="id"/>

		<addUniqueConstraint 
			constraintName="uc_meta_view_group$internal_name" 
			tableName="meta_view_group"
			columnNames="internal_name"/>
			
		<insert tableName="meta_type">
			<column name="internal_name" value="meta_view_group"/>
		</insert>

		<insert tableName="meta_attribute">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view_group')"/>
			<column name="internal_name" value="internal_name"/>
			<column name="attr_type_id" valueComputed="(select id from meta_type where internal_name = 's')"/>
			<column name="length" value="${type.length.internal_name}"/>
			<column name="is_non_nullable" value="true"/>
			<column name="is_unique" value="true"/>			
		</insert>

		<insert tableName="meta_attribute">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view_group')"/>
			<column name="internal_name" value="name"/>
			<column name="attr_type_id" valueComputed="(select id from meta_type where internal_name = 's')"/>
			<column name="length" value="${type.length.name}"/>
			<column name="is_non_nullable" value="true"/>
			<column name="is_localisable" value="true"/>
		</insert>

		<insert tableName="meta_attribute">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view_group')"/>
			<column name="internal_name" value="description"/>
			<column name="attr_type_id" valueComputed="(select id from meta_type where internal_name = 's')"/>
			<column name="length" value="${type.length.description}"/>
			<column name="is_non_nullable" value="false"/>
			<column name="is_localisable" value="true"/>
		</insert>
	
		<!-- meta_view -->
		<createTable
			tableName="meta_view" 
			remarks="Meta view">
			<column name="id" type="${type.id}" autoIncrement="true" remarks="Identifier">
				<constraints nullable="false" />
			</column>
			<column name="internal_name" type="${type.internal_name}" remarks="Internal name">
				<constraints nullable="false" />
			</column>
			<column name="schema_id" type="${type.id}" remarks="Schema identifier">
				<constraints nullable="false" />
			</column>
			<column name="group_id" type="${type.id}" remarks="View group identifier">
				<constraints nullable="true" />
			</column>
			<column name="query" type="clob" remarks="Query">
				<constraints nullable="false" />
			</column>
			<column name="is_created" type="boolean" remarks="Is created" defaultValueBoolean="false">
				<constraints nullable="false" />
			</column>
			<column name="is_valid" type="boolean" remarks="Is valid" defaultValueBoolean="false">
				<constraints nullable="false" />
			</column>
			<column name="is_external" type="boolean" remarks="Is external" defaultValueBoolean="false">
				<constraints nullable="false" />
			</column>
			<column name="refresh_time" type="timestamp" remarks="Refresh time">
				<constraints nullable="true" />
			</column>
		</createTable>
		
		<addPrimaryKey 
			constraintName="pk_meta_view" 
			tableName="meta_view"
			columnNames="id"/>

		<addUniqueConstraint 
			constraintName="uc_meta_view$internal_name" 
			tableName="meta_view"
			columnNames="internal_name, schema_id"/>
			
		<createIndex 
			indexName="i_meta_view$schema_id" 
			tableName="meta_view">
			<column name="schema_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view$schema_id"
			baseTableName="meta_view" 
			baseColumnNames="schema_id" 
			referencedTableName="meta_schema" 
			referencedColumnNames="id" />

		<createIndex 
			indexName="i_meta_view$group_id" 
			tableName="meta_view">
			<column name="group_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view$group_id"
			baseTableName="meta_view" 
			baseColumnNames="group_id" 
			referencedTableName="meta_view_group" 
			referencedColumnNames="id" />

		<insert tableName="meta_type">
			<column name="internal_name" value="meta_view"/>
		</insert>

		<insert tableName="meta_attribute">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view')"/>
			<column name="internal_name" value="internal_name"/>
			<column name="attr_type_id" valueComputed="(select id from meta_type where internal_name = 's')"/>
			<column name="length" value="${type.length.internal_name}"/>
			<column name="is_non_nullable" value="true"/>
			<column name="is_unique" value="true"/>			
		</insert>

		<insert tableName="meta_attribute">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view')"/>
			<column name="internal_name" value="name"/>
			<column name="attr_type_id" valueComputed="(select id from meta_type where internal_name = 's')"/>
			<column name="length" value="${type.length.name}"/>
			<column name="is_non_nullable" value="true"/>
			<column name="is_localisable" value="true"/>
		</insert>

		<insert tableName="meta_attribute">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view')"/>
			<column name="internal_name" value="description"/>
			<column name="attr_type_id" valueComputed="(select id from meta_type where internal_name = 's')"/>
			<column name="length" value="${type.length.description}"/>
			<column name="is_non_nullable" value="false"/>
			<column name="is_localisable" value="true"/>
		</insert>

		<!-- meta_view_dependency --> 			
		<createTable
			tableName="meta_view_dependency" 
			remarks="Meta view dependency">
			<column name="view_id" type="${type.id}" remarks="Dependent view identifier">
				<constraints nullable="false" />
			</column>
			<column name="master_view_id" type="${type.id}" remarks="Master view identifier">
				<constraints nullable="false" />
			</column>
		</createTable>

		<addPrimaryKey 
			constraintName="pk_meta_view_dependency" 
			tableName="meta_view_dependency"
			columnNames="view_id, master_view_id"/>
		
		<createIndex 
			indexName="i_meta_view_dependency$view_id" 
			tableName="meta_view_dependency">
			<column name="view_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_dependency$view_id"
			baseTableName="meta_view_dependency" 
			baseColumnNames="view_id" 
			referencedTableName="meta_view" 
			referencedColumnNames="id" />

		<createIndex 
			indexName="i_meta_view_dependency$master_view_id" 
			tableName="meta_view_dependency">
			<column name="master_view_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_dependency$master_view_id"
			baseTableName="meta_view_dependency" 
			baseColumnNames="master_view_id" 
			referencedTableName="meta_view" 
			referencedColumnNames="id" />
		
	</changeSet>     
	
	<changeSet id="meta_view name" author="${default_author}">
	
		<preConditions onFail="CONTINUE">
			<tableExists tableName="meta_type_lc" schemaName="${mainSchemaName}"/>
		</preConditions>	
	
		<insert tableName="meta_type_lc">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view')"/>
			<column name="attr_id" valueComputed="(
				select 
					a.id
				from 
					meta_type t 
				join meta_attribute a 
					on a.master_id = t.id 
				where 
					t.internal_name = 'meta_type'
					and a.internal_name = 'name'
			)"/>
			<column name="lang_id" valueComputed="(select id from language where tag = 'ru')"/>
			<column name="lc_string" value="Метапредставление"/>
		</insert>
	
	</changeSet>
	
	<changeSet id="meta_view_group name" author="${default_author}">
	
		<preConditions onFail="CONTINUE">
			<tableExists tableName="meta_type_lc" schemaName="${mainSchemaName}"/>
		</preConditions>	
	
		<insert tableName="meta_type_lc">
			<column name="master_id" valueComputed="(select id from meta_type where internal_name = 'meta_view_group')"/>
			<column name="attr_id" valueComputed="(
				select 
					a.id
				from 
					meta_type t 
				join meta_attribute a 
					on a.master_id = t.id 
				where 
					t.internal_name = 'meta_type'
					and a.internal_name = 'name'
			)"/>
			<column name="lang_id" valueComputed="(select id from language where tag = 'ru')"/>
			<column name="lc_string" value="Группа метапредставлений"/>
		</insert>
	
	</changeSet>
	
	<changeSet id="meta_view_creation_order" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="creation_order" type="integer" remarks="Creation_order" defaultValue="0">
				<constraints nullable="true" />
			</column>
		</addColumn>

	</changeSet>

	<changeSet id="meta_view-is_disabled" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="is_disabled" type="boolean" remarks="Is disabled" defaultValueBoolean="false">
				<constraints nullable="true" />
			</column>
		</addColumn>

	</changeSet>
			
	<changeSet id="meta_view_dependency-level" author="${default_author}">

		<addColumn tableName="meta_view_dependency">
			<column name="level" type="integer" remarks="Dependency level" defaultValue="0">
				<constraints nullable="false" />
			</column>
		</addColumn>

	</changeSet>
	
	<changeSet id="meta_view-stored-dependency_level" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="dependency_level" type="integer" remarks="Dependency level">
				<constraints nullable="true" />
			</column>
		</addColumn>

	</changeSet>

	<changeSet id="meta_view internal_name size increasing" author="${default_author}">
		<modifyDataType
			tableName="meta_view"  
            columnName="internal_name"  
            newDataType="clob"/>  
			
		<update tableName="meta_attribute">
			<column name="length" value="null"/>
			<where>master_id = (select id from meta_type where internal_name = 'meta_view') and internal_name = 'internal_name'</where>
		</update>
	</changeSet>
	
	<changeSet id="meta_view modification_time" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="modification_time" type="timestamp" remarks="Modification time" defaultValueDate="current_timestamp" >
				<constraints nullable="true" />
			</column>
		</addColumn>

	</changeSet>
	
	<changeSet id="meta_view_dependency on meta_type" author="${default_author}">

		<addColumn tableName="meta_view_dependency">
			<column name="master_type_id" type="${type.id}" remarks="Master type identifier">
				<constraints nullable="true" />
			</column>
		</addColumn>
		
		<createIndex 
			indexName="i_meta_view_dependency$master_type_id" 
			tableName="meta_view_dependency">
			<column name="master_type_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_dependency$master_type_id"
			baseTableName="meta_view_dependency" 
			baseColumnNames="master_type_id" 
			referencedTableName="meta_view" 
			referencedColumnNames="id" />
			
		<dropPrimaryKey 
			constraintName="pk_meta_view_dependency" 
			tableName="meta_view_dependency" />
			
		<dropNotNullConstraint
			tableName="meta_view_dependency"
			columnName="master_view_id" />		
			
		<!-- Check constraint -->
		<sql dbms="postgresql">
			alter table meta_view_dependency
				add constraint chk_meta_view_dependency$master_view_type check (((master_view_id is null) = (master_type_id is not null)))		
		</sql>
		
		<addUniqueConstraint 
			constraintName="uc_meta_view_dependency" 
			tableName="meta_view_dependency"
			columnNames="view_id, master_view_id, master_type_id"/>

	</changeSet>
	
	<changeSet id="meta_view_dependency on meta_type: FK fix" author="${default_author}">

		<dropForeignKeyConstraint 
			constraintName="fk_meta_view_dependency$master_type_id"
			baseTableName="meta_view_dependency" />

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_dependency$master_type_id"
			baseTableName="meta_view_dependency" 
			baseColumnNames="master_type_id" 
			referencedTableName="meta_type" 
			referencedColumnNames="id" />
	
	</changeSet>
	
	<changeSet id="meta_view_dependency on meta_type initial filling (with infinite loop protection)" author="${default_author}">
	
		<preConditions onFail="CONTINUE">
			<viewExists viewName="v_sys_obj_dependency" schemaName="${mainSchemaName}"/>
		    <sqlCheck expectedResult="0">
				select 
					count(1)
		        from 
		        	${mainSchemaName}.meta_view_dependency
		        where 
		        	master_type_id is not null
		    </sqlCheck>			
		</preConditions>	
	
		<sql dbms="postgresql">
			with recursive 
				meta_type as (
					select 
						t.id
						, t.internal_name
						, coalesce(s.internal_name, '${mainSchemaName}') as schema_name
					from 
						${mainSchemaName}.meta_type t
					left join ${mainSchemaName}.meta_schema s 
						on s.id = t.schema_id
					where 
						not t.is_abstract
						and not t.is_primitive
				)
				, v_sys_obj_dependency as (
					select 
						*
					from 
						${mainSchemaName}.v_sys_obj_dependency
				)
				, dependent as (
					select distinct
						t.id as type_id
						, dep.dependent_obj_id as cls_oid
						, dep.dependent_obj_name as cls_name
						, dep.dependent_obj_schema as cls_schema
						, 0 as dep_level
						, array[dep.dependent_obj_id] as dep_seq
					from 
						v_sys_obj_dependency dep
					join meta_type t 
						on t.internal_name = dep.master_obj_name
						and t.schema_name = dep.master_obj_schema
					where
						dep.master_obj_class = 'relation'
					union all
					select distinct
						dependent.type_id
						, dep.dependent_obj_id as cls_oid
						, dep.dependent_obj_name as cls_name
						, dep.dependent_obj_schema as cls_schema
						, dependent.dep_level + 1 as dep_level
						, dependent.dep_seq || dep.dependent_obj_id as dep_seq
					from 
						dependent
					join v_sys_obj_dependency dep
						on dep.master_obj_id = dependent.cls_oid
					where 
						dep.dependent_obj_id != all(dependent.dep_seq)
				)
			insert into 
				${mainSchemaName}.meta_view_dependency(
					view_id
					, master_type_id
					, level
				)
			select 
				v.id as view_id
				, dependent.type_id as master_type_id
				, min(dependent.dep_level) as dep_level
			from 
				${mainSchemaName}.meta_view v
			left join ${mainSchemaName}.meta_schema s
				on s.id = v.schema_id
			join dependent
				on dependent.cls_name = v.internal_name 
				and dependent.cls_schema = coalesce(s.internal_name, '${mainSchemaName}')
			where 
				not exists (
					select 
						1
					from 
						${mainSchemaName}.meta_view_dependency dep 
					where 
						dep.view_id = v.id
						and dep.master_type_id = dependent.type_id
				)
			group by 
				v.id
				, dependent.type_id
		</sql>
	
	</changeSet>
	
	<changeSet id="meta_view_dependency deduplication" author="${default_author}">
	
		<preConditions onFail="CONTINUE">
		    <sqlCheck expectedResult="0">
				select 
					case when count(*) > 0 then 0 else 1 end
				from (
					select 
						view_id, master_view_id
			        from 
			        	${mainSchemaName}.meta_view_dependency
			        where 
			        	master_view_id is not null
			        group by 
			        	view_id, master_view_id
			        having 
			        	count(*) > 1
			        union all
					select 
						view_id, master_type_id
			        from 
			        	${mainSchemaName}.meta_view_dependency
			        where 
			        	master_type_id is not null
			        group by 
			        	view_id, master_type_id
			        having 
			        	count(*) > 1
				) t
			</sqlCheck>			
		</preConditions>	
	
		<sql dbms="postgresql">
			create temp table t_meta_view_dependency
			as 
			select * 
			from ${mainSchemaName}.meta_view_dependency
			;
			
			truncate ${mainSchemaName}.meta_view_dependency
			;
			
			insert into
				${mainSchemaName}.meta_view_dependency(
					view_id
					, master_view_id
					, level
				)
			select 
				view_id
				, master_view_id
				, min(level)
			from 	
				t_meta_view_dependency
			where 
				master_view_id is not null
			group by 
				view_id
				, master_view_id
			;

			insert into
				${mainSchemaName}.meta_view_dependency(
					view_id
					, master_type_id
					, level
				)
			select 
				view_id
				, master_type_id
				, min(level)
			from 	
				t_meta_view_dependency
			where 
				master_type_id is not null
			group by 
				view_id
				, master_type_id
			;
			
			drop table t_meta_view_dependency
			;
		</sql>
	
	</changeSet>	
	
	<changeSet id="meta_view_dependency: separate unique constraints" author="${default_author}">

		<dropUniqueConstraint 
			constraintName="uc_meta_view_dependency" 
			tableName="meta_view_dependency" />

		<addUniqueConstraint 
			constraintName="uc_meta_view_dependency$master_view_id" 
			tableName="meta_view_dependency"
			columnNames="view_id, master_view_id"/>

		<addUniqueConstraint 
			constraintName="uc_meta_view_dependency$master_type_id" 
			tableName="meta_view_dependency"
			columnNames="view_id, master_type_id"/>
	
	</changeSet>
	
	<changeSet id="meta_view_dependency description" author="${default_author}">
	
 		<setTableRemarks
            tableName="meta_view_dependency"
            remarks="Зависимость метапредставления" />  	
	
	</changeSet>
	
	<changeSet id="materialized view emulation" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="is_matview_emulation" type="boolean" remarks="Is materialized view emulation" defaultValueBoolean="false">
				<constraints nullable="false" />
			</column>
			<column name="mv_emulation_chunking_field" type="${type.internal_name}" remarks="Materialized view emulation chunking field">
				<constraints nullable="true" />
			</column>
			<column name="mv_emulation_chunks_query" type="clob" remarks="Materialized view emulation chunks query">
				<constraints nullable="true" />
			</column>
		</addColumn>
		
	</changeSet>

	<changeSet id="materialized view emulation: mv_emulation_chunks_bucket_size" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="mv_emulation_chunks_bucket_size" type="integer" remarks="Materialized view emulation chunks bucket size" defaultValueNumeric="1">
				<constraints nullable="true" />
			</column>
		</addColumn>
		
	</changeSet>

	<changeSet id="materialized view emulation: mv_emulation_chunk_row_limit" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="mv_emulation_chunk_row_limit" type="integer" remarks="Materialized view emulation chunk row limit">
				<constraints nullable="true" />
			</column>
		</addColumn>
		
	</changeSet>

	<changeSet id="materialized view emulation: mv_emulation_with_partitioning" author="${default_author}">

		<addColumn tableName="meta_view">
			<column name="mv_emulation_with_partitioning" type="boolean" remarks="Materialized view emulation with partitioning" defaultValueBoolean="false">
				<constraints nullable="false" />
			</column>
		</addColumn>
		
	</changeSet>

	<changeSet id="Meta view chunk dependency" author="${default_author}">
	
		<createTable
			tableName="meta_view_chunk_dependency" 
			remarks="Meta view chunk dependency used when partially refreshing an emulated materialized view">
			<column name="view_id" type="${type.id}" remarks="Dependent view identifier">
				<constraints nullable="false" />
			</column>
			<column name="chunking_field" type="${type.internal_name}" remarks="Chunking field">
				<constraints nullable="false" />
			</column>
			<column name="master_view_id" type="${type.id}" remarks="Master view identifier">
				<constraints nullable="true" />
			</column>
			<column name="master_type_id" type="${type.id}" remarks="Master type identifier">
				<constraints nullable="true" />
			</column>
			<column name="master_chunk_field" type="${type.internal_name}" remarks="Master chunk field">
				<constraints nullable="false" />
			</column>
		</createTable>

		<createIndex 
			indexName="i_meta_view_chunk_dependency$view_id" 
			tableName="meta_view_chunk_dependency">
			<column name="view_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_chunk_dependency$view_id"
			baseTableName="meta_view_chunk_dependency" 
			baseColumnNames="view_id" 
			referencedTableName="meta_view" 
			referencedColumnNames="id" />

		<createIndex 
			indexName="i_meta_view_chunk_dependency$master_view_id" 
			tableName="meta_view_chunk_dependency">
			<column name="master_view_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_chunk_dependency$master_view_id"
			baseTableName="meta_view_chunk_dependency" 
			baseColumnNames="master_view_id" 
			referencedTableName="meta_view" 
			referencedColumnNames="id" />
			
		<createIndex 
			indexName="i_meta_view_chunk_dependency$master_type_id" 
			tableName="meta_view_chunk_dependency">
			<column name="master_type_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_meta_view_chunk_dependency$master_type_id"
			baseTableName="meta_view_chunk_dependency" 
			baseColumnNames="master_type_id" 
			referencedTableName="meta_view" 
			referencedColumnNames="id" />
			
		<!-- Check constraint -->
		<sql dbms="postgresql">
			alter table meta_view_chunk_dependency
				add constraint chk_meta_view_chunk_dependency$master_view_type check (((master_view_id is null) = (master_type_id is not null)))		
		</sql>
			
		<addUniqueConstraint 
			constraintName="uc_meta_view_chunk_dependency$master_view_id" 
			tableName="meta_view_chunk_dependency"
			columnNames="view_id, chunking_field, master_view_id"/>

		<addUniqueConstraint 
			constraintName="uc_meta_view_chunk_dependency$master_type_id" 
			tableName="meta_view_chunk_dependency"
			columnNames="view_id, chunking_field, master_type_id"/>
		
	</changeSet>     
	
	<changeSet id="meta_view_chunk_dependency: comparison_operator" author="${default_author}">
		<addColumn tableName="meta_view_chunk_dependency">
			<column name="comparison_operator" type="${type.internal_name}" remarks="Comparison operator" defaultValue="=">
				<constraints nullable="false" />
			</column>
		</addColumn>
	</changeSet>
	
	<changeSet id="meta_view_chunk_dependency: deprecated columns nullability" author="${default_author}">
		<dropNotNullConstraint
			tableName="meta_view_chunk_dependency"
			columnName="master_chunk_field" />
		<dropNotNullConstraint
			tableName="meta_view_chunk_dependency"
			columnName="comparison_operator" />		
	</changeSet>

	<changeSet id="meta_view_chunk_dependency: invalidated_chunk_query_tmpl" author="${default_author}">

		<addColumn tableName="meta_view_chunk_dependency">
			<column name="invalidated_chunk_query_tmpl" type="clob" remarks="Invalidated chunk query template">
				<constraints nullable="false" />
			</column>
		</addColumn>
		
	</changeSet>
	
	<changeSet id="materialized_view_refresh_duration" author="${default_author}">
	
		<createTable
			tableName="materialized_view_refresh_duration" 
			schemaName="${stagingSchemaName}"
			remarks="Длительность обновления материализованных представлений">
			<column name="meta_view_id" type="${type.id}" remarks="Идентификатор метапредставления">
				<constraints nullable="false" />
			</column>
			<column name="start_time" type="datetime" remarks="Время старта">
				<constraints nullable="false" />
			</column>
			<column name="end_time" type="datetime" remarks="Время завершения">
				<constraints nullable="false" />
			</column>
		</createTable>

		<createIndex 
			indexName="i_materialized_view_refresh_duration$meta_view_id" 
			tableName="materialized_view_refresh_duration"
			schemaName="${stagingSchemaName}">
			<column name="meta_view_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_materialized_view_refresh_duration$meta_view_id"
			baseTableName="materialized_view_refresh_duration" 
			baseTableSchemaName="${stagingSchemaName}"
			baseColumnNames="meta_view_id" 
			referencedTableName="meta_view" 
			referencedTableSchemaName="${mainSchemaName}"
			referencedColumnNames="id" />

	</changeSet>

	<changeSet id="emulated materialized view partition" author="${default_author}">
	
		<createTable
			tableName="materialized_view_partition" 
			schemaName="${stagingSchemaName}"
			remarks="Секция эмулируемого материализованного представления">
			<column name="meta_view_id" type="${type.id}" remarks="Идентификатор метапредставления">
				<constraints nullable="false" />
			</column>
			<column name="partition_id" type="${type.description}" remarks="Идентификатор секции">
				<constraints nullable="false" />
			</column>
			<column name="current_table_id" type="${type.system_object_id}" remarks="Идентификатор текущей физической таблицы">
				<constraints nullable="false" />
			</column>
			<column name="shadow_table_id" type="${type.system_object_id}" remarks="Идентификатор теневой физической таблицы">
				<constraints nullable="true" />
			</column>
			<column name="partition_bound_spec" type="${type.name}" remarks="Выражение, задающее границы секции">
				<constraints nullable="false" />
			</column>
		</createTable>
		
		<addPrimaryKey 
			constraintName="pk_materialized_view_partition" 
			tableName="materialized_view_partition"
			schemaName="${stagingSchemaName}"
			columnNames="meta_view_id, partition_id"/>

		<createIndex 
			indexName="i_materialized_view_partition$meta_view_id" 
			tableName="materialized_view_partition"
			schemaName="${stagingSchemaName}">
			<column name="meta_view_id" />
		</createIndex>

		<addForeignKeyConstraint 
			constraintName="fk_materialized_view_partition$meta_view_id"
			baseTableName="materialized_view_partition" 
			baseTableSchemaName="${stagingSchemaName}"
			baseColumnNames="meta_view_id" 
			referencedTableName="meta_view" 
			referencedTableSchemaName="${mainSchemaName}"
			referencedColumnNames="id" />

	</changeSet>
            			
</databaseChangeLog>
